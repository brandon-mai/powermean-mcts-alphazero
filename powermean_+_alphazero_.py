# -*- coding: utf-8 -*-
"""PowerMean + AlphaZero .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15fnVskQfGYMim1Zgd-TAldKiH-69wOP0
"""

# Source: https://www.youtube.com/watch?v=wuSQpLinRB4
import numpy as np
print(np.__version__)


import torch
print(torch.__version__)

import torch.nn as nn
import torch.nn.functional as F

torch.manual_seed(0)

import math
from concurrent.futures import ThreadPoolExecutor
from games import TicTacToe, ConnectFour
from models import ResNet, MockNeuralNetwork
from mcts import Stochastic_PowerMean_UCT

# TicTacToe - Human vs Agent
tictactoe = TicTacToe()
# model = MockNeuralNetwork(tictactoe, 4, 64)
model = ResNet(tictactoe, 4, 64)

mcts_powermean = Stochastic_PowerMean_UCT(
    game=tictactoe,
    model=model,
    gamma=0.95,
    p=1.5,
    num_rollout=20,
    num_workers=3,
    args={'C': 1.41, 'num_searches': 10}
)

def render_ttt(state):
    symbols = {1: 'X', -1: 'O', 0: ' '}
    print("\nBoard:")
    for r in range(3):
        print(" | ".join(symbols[int(x)] for x in state[r]))
        if r < 2:
            print("---------")
    print()

print("You are X (player 1). Bot is O (player -1).")
print("Positions are numbered 0–8 from top-left to bottom-right:\n")
print("0 | 1 | 2")
print("---------")
print("3 | 4 | 5")
print("---------")
print("6 | 7 | 8\n")

state = tictactoe.get_initial_state()
player = 1

while True:
    render_ttt(state)
    valid_moves = tictactoe.get_valid_moves(state)
    if player == 1:
        move = int(input("Your move (0-8): "))
        if move < 0 or move >= 9 or valid_moves[move] == 0:
            print("Invalid move, try again.")
            continue
    else:
        neutral_state = tictactoe.change_perspective(state, -1)
        mcts_probs = mcts_powermean.search(neutral_state)
        move = int(np.argmax(mcts_probs))
        print(f"Bot plays at position {move}")
    state = tictactoe.get_next_state(state.copy(), move, player)
    value, is_terminal = tictactoe.get_value_and_terminated(state, move)
    if is_terminal:
        render_ttt(state)
        if value == 1:
            print("You win!" if player == 1 else "Bot wins!")
        else:
            print("It's a draw!")
        break
    player = tictactoe.get_opponent(player)

# Connect Four: Human vs Agent
connect4 = ConnectFour()
# model = MockNeuralNetwork(connect4, 4, 64)
model = ResNet(connect4, 9, 128)

mcts_powermean = Stochastic_PowerMean_UCT(
    game=connect4,
    model=model,
    gamma=0.95,
    p=1.5,
    num_rollout=20,
    num_workers=3,
    args={'C': 1.41, 'num_searches': 25}
)

def render_connect4(state):
    symbols = {1: 'X', -1: 'O', 0: ' '}
    print("\nBoard:")
    for r in range(connect4.row_count):
        print(" | ".join(symbols[int(x)] for x in state[r]))
        if r < connect4.row_count - 1:
            print("-" * (connect4.column_count * 4 - 1))
    print()

print("You are X (player 1). Bot is O (player -1).")

state = connect4.get_initial_state()
player = 1
while True:
    render_connect4(state)
    valid_moves = connect4.get_valid_moves(state)
    if player == 1:
        move = int(input(f"Your move (0–{connect4.action_size - 1}): "))
        if move < 0 or move >= connect4.action_size or valid_moves[move] == 0:
            print("Invalid move, try again.")
            continue
    else:
        neutral_state = connect4.change_perspective(state, -1)
        mcts_probs = mcts_powermean.search(neutral_state)
        move = int(np.argmax(mcts_probs))
        print(f"Bot plays at position {move}")
    state = connect4.get_next_state(state.copy(), move, player)
    value, is_terminal = connect4.get_value_and_terminated(state, move)
    if is_terminal:
        render_connect4(state)
        if value == 1:
            print("You win!" if player == 1 else "Bot wins!")
        else:
            print("It's a draw!")
        break
    player = connect4.get_opponent(player)

